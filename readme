Assignment 3 readme File

------------------------------------------------------------------------
What is your name?
Blake Stenstrom


------------------------------------------------------------------------
What authorized sources of information did you use to complete the
assignment? COPY THE LIST of authorized sources of information given
in the "Policies" web page (also available on armlab in the file
~cos217/AuthorizedSourcesList ) to this section of the readme file,
and edit it as appropriate.
Lab TA's
Precept office hours
Professor Office Hours
Book
Course website
Assignment page



------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.
None



------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?
This was a very helpful assignment. While it took me a bit of work to
get through some bugs that I had, I felt very accomplished after I finished
it.


------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?



------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."
symtablelist.c: (in function SymTable_map)
symtablelist.c:275:5: Statement has no effect: pfApply((const c...
  Statement has no visible effect --- no values are modified. (Use -noeffect to
  inhibit warning)
symtablelist.c:278:9: Statement has no effect: pfApply((const c...
I disagree with these. the pfApply function will be defined by the client
and will modify the values to their liking.



------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

symtablelist.c: line 71: medium priority:
Do you want to validate 'pvValue' through an assert?

symtablelist.c: line 101: medium priority:
Do you want to validate 'pvValue' through an assert?

For the first two, I do not want to validate that pvValue is not NULL
There are reasons why you might want to keep it NULL and the test code
even sets it as NULL sometimes.

symtablelist.c: line 234: medium priority:
Do you want to validate 'pvExtra' through an assert?
I do not want to validate pvExtra is not NULL. There are reasons why
the client might want it to be NULL, especially if it doesn't serve
a purpose and we do not want to confuse anyone who reads our code.


------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

symtablehash.c: (in function SymTable_put)
symtablehash.c:129:5: Assignment of size_t to int:
    hash = SymTable_hash(pcKey, (size_t)(oSymTable->buckets[0]))
  To allow arbitrary integral types to match any integral type, use
  +matchanyintegral.
symtablehash.c: (in function SymTable_replace)
symtablehash.c:167:5: Assignment of size_t to int:
    hash = SymTable_hash(pcKey, (size_t)(oSymTable->buckets[0]))
symtablehash.c: (in function SymTable_contains)
symtablehash.c:215:5: Assignment of size_t to int:
    hash = SymTable_hash(pcKey, (size_t)(oSymTable->buckets[0]))
symtablehash.c: (in function SymTable_get)
symtablehash.c:241:5: Assignment of size_t to int:
    hash = SymTable_hash(pcKey, (size_t)(oSymTable->buckets[0]))
symtablehash.c: (in function SymTable_remove)
symtablehash.c:267:5: Assignment of size_t to int:
    hash = SymTable_hash(pcKey, (size_t)(oSymTable->buckets[0]))
symtablehash.c: (in function SymTable_map)

All of these are because I set up my bucketCounts array to be ints. I tried
changing it to size_t but it caused issues. As far as I know,
I think it is totally fine to do this.

symtablehash.c:322:9: Statement has no effect: pfApply((const c...
  Statement has no visible effect --- no values are modified. (Use -noeffect to
  inhibit warning)
symtablehash.c:325:13: Statement has no effect: pfApply((const c...
I disagree with these. the pfApply function will be defined by the client
and will modify the values to their liking.



------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."



------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed 0.0 seconds.
-- 500 bindings consumed 0.01 seconds.
-- 5000 bindings consumed 0.99 seconds.
-- 50000 bindings consumed 96.62 seconds.
-- 500000 bindings consumed More than 5 minutes.

The non-expanding hash table implementation with:
-- 50 bindings consumed 0.0 seconds.
-- 500 bindings consumed 0.0 seconds.
-- 5000 bindings consumed 0.01 seconds.
-- 50000 bindings consumed 0.4 seconds.
-- 500000 bindings consumed 68.41 seconds.

The expanding hash table implementation with:
-- 50 bindings consumed ________ seconds.
-- 500 bindings consumed ________ seconds.
-- 5000 bindings consumed ________ seconds.
-- 50000 bindings consumed ________ seconds.
-- 500000 bindings consumed ________ seconds.
